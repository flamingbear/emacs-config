;;-*-coding: emacs-mule;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '(    ))

(define-abbrev-table 'Custom-mode-abbrev-table '(    ))

(define-abbrev-table 'antlr-mode-abbrev-table '(    ))

(define-abbrev-table 'apropos-mode-abbrev-table '(    ))

(define-abbrev-table 'asm-mode-abbrev-table '(    ))

(define-abbrev-table 'awk-mode-abbrev-table '(    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'bsh-script-mode-abbrev-table '(    ))

(define-abbrev-table 'c++-mode-abbrev-table '(    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'c-mode-abbrev-table '(    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'calendar-mode-abbrev-table '(    ))

(define-abbrev-table 'change-log-mode-abbrev-table '(    ))

(define-abbrev-table 'comint-mode-abbrev-table '(    ))

(define-abbrev-table 'completion-list-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-colon-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-ppd-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-space-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-unix-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-windows-mode-abbrev-table '(    ))

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '(    ))

(define-abbrev-table 'cperl-mode-abbrev-table '(    ("=head1" "=head1" cperl-electric-pod 0)
    ("=head2" "=head2" cperl-electric-pod 0)
    ("=over" "=over" cperl-electric-pod 0)
    ("=pod" "=pod" cperl-electric-pod 0)
    ("continue" "continue" cperl-electric-else 0)
    ("do" "do" cperl-electric-keyword 0)
    ("else" "else" cperl-electric-else 2)
    ("elsif" "elsif" cperl-electric-keyword 0)
    ("for" "for" cperl-electric-keyword 7)
    ("foreach" "foreach" cperl-electric-keyword 0)
    ("foreachmy" "foreachmy" cperl-electric-keyword 0)
    ("formy" "formy" cperl-electric-keyword 0)
    ("head1" "head1" cperl-electric-pod 0)
    ("head2" "head2" cperl-electric-pod 0)
    ("if" "if" cperl-electric-keyword 26)
    ("over" "over" cperl-electric-pod 1)
    ("pod" "pod" cperl-electric-pod 0)
    ("unless" "unless" cperl-electric-keyword 0)
    ("until" "until" cperl-electric-keyword 0)
    ("while" "while" cperl-electric-keyword 0)
    ))

(define-abbrev-table 'cvs-mode-abbrev-table '(    ))

(define-abbrev-table 'cvs-status-mode-abbrev-table '(    ))

(define-abbrev-table 'delphi-mode-abbrev-table '(    ))

(define-abbrev-table 'diary-fancy-display-mode-abbrev-table '(    ))

(define-abbrev-table 'diary-mode-abbrev-table '(    ))

(define-abbrev-table 'diff-mode-abbrev-table '(    ))

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '(    ))

(define-abbrev-table 'f90-mode-abbrev-table '(    ("`ab" "allocatable" nil 0)
    ("`al" "allocate" nil 0)
    ("`as" "assignment" nil 0)
    ("`ba" "backspace" nil 0)
    ("`bd" "block data" nil 0)
    ("`c" "character" nil 0)
    ("`cl" "close" nil 0)
    ("`cm" "common" nil 0)
    ("`cn" "contains" nil 0)
    ("`cx" "complex" nil 0)
    ("`cy" "cycle" nil 0)
    ("`de" "deallocate" nil 0)
    ("`df" "define" nil 0)
    ("`di" "dimension" nil 0)
    ("`dw" "do while" nil 0)
    ("`el" "else" nil 0)
    ("`eli" "else if" nil 0)
    ("`elw" "elsewhere" nil 0)
    ("`eq" "equivalence" nil 0)
    ("`ex" "external" nil 0)
    ("`ey" "entry" nil 0)
    ("`fa" ".false." nil 0)
    ("`fl" "forall" nil 0)
    ("`fo" "format" nil 0)
    ("`fu" "function" nil 0)
    ("`i" "integer" nil 0)
    ("`if" "interface" nil 0)
    ("`im" "implicit none" nil 0)
    ("`in " "include" nil 0)
    ("`it" "intent" nil 0)
    ("`lo" "logical" nil 0)
    ("`mo" "module" nil 0)
    ("`na" "namelist" nil 0)
    ("`nu" "nullify" nil 0)
    ("`op" "optional" nil 0)
    ("`pa" "parameter" nil 0)
    ("`pi" "private" nil 0)
    ("`pm" "program" nil 0)
    ("`po" "pointer" nil 0)
    ("`pr" "print" nil 0)
    ("`pu" "public" nil 0)
    ("`r" "real" nil 0)
    ("`rc" "recursive" nil 0)
    ("`rt" "return" nil 0)
    ("`rw" "rewind" nil 0)
    ("`se" "select" nil 0)
    ("`sq" "sequence" nil 0)
    ("`su" "subroutine" nil 0)
    ("`t" "type" nil 0)
    ("`ta" "target" nil 0)
    ("`tr" ".true." nil 0)
    ("`wh" "where" nil 0)
    ("`wr" "write" nil 0)
    ))

(define-abbrev-table 'fortran-mode-abbrev-table '(    (";au" "automatic" nil 0)
    (";b" "byte" nil 0)
    (";bd" "block data" nil 0)
    (";c" "continue" nil 0)
    (";ch" "character" nil 0)
    (";cl" "close" nil 0)
    (";cm" "common" nil 0)
    (";cx" "complex" nil 0)
    (";dc" "double complex" nil 0)
    (";df" "define" nil 0)
    (";di" "dimension" nil 0)
    (";do" "double" nil 0)
    (";dp" "double precision" nil 0)
    (";dw" "do while" nil 0)
    (";e" "else" nil 0)
    (";ed" "enddo" nil 0)
    (";el" "elseif" nil 0)
    (";en" "endif" nil 0)
    (";eq" "equivalence" nil 0)
    (";ew" "endwhere" nil 0)
    (";ex" "external" nil 0)
    (";ey" "entry" nil 0)
    (";f" "format" nil 0)
    (";fa" ".false." nil 0)
    (";fu" "function" nil 0)
    (";g" "goto" nil 0)
    (";ib" "implicit byte" nil 0)
    (";ic" "implicit complex" nil 0)
    (";ich" "implicit character" nil 0)
    (";ii" "implicit integer" nil 0)
    (";il" "implicit logical" nil 0)
    (";im" "implicit" nil 0)
    (";in" "integer" nil 0)
    (";inc" "include" nil 0)
    (";intr" "intrinsic" nil 0)
    (";ir" "implicit real" nil 0)
    (";l" "logical" nil 0)
    (";n" "namelist" nil 0)
    (";o" "open" nil 0)
    (";p" "print" nil 0)
    (";pa" "parameter" nil 0)
    (";pr" "program" nil 0)
    (";ps" "pause" nil 0)
    (";r" "read" nil 0)
    (";rc" "record" nil 0)
    (";re" "real" nil 0)
    (";rt" "return" nil 0)
    (";rw" "rewind" nil 0)
    (";s" "stop" nil 0)
    (";sa" "save" nil 0)
    (";sc" "static" nil 0)
    (";st" "structure" nil 0)
    (";su" "subroutine" nil 0)
    (";tr" ".true." nil 0)
    (";ty" "type" nil 0)
    (";vo" "volatile" nil 0)
    (";w" "write" nil 0)
    (";wh" "where" nil 0)
    ))

(define-abbrev-table 'fundamental-mode-abbrev-table '(    ))

(define-abbrev-table 'gdb-script-mode-abbrev-table '(    ))

(define-abbrev-table 'global-abbrev-table '(    ))

(define-abbrev-table 'gnus-article-edit-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'gnus-sticky-article-mode-abbrev-table '(    ))

(define-abbrev-table 'grep-mode-abbrev-table '(    ))

(define-abbrev-table 'gud-mode-abbrev-table '(    ))

(define-abbrev-table 'html-helper-mode-abbrev-table '(    ))

(define-abbrev-table 'html-mode-abbrev-table '(    ))

(define-abbrev-table 'icon-mode-abbrev-table '(    ))

(define-abbrev-table 'idl-mode-abbrev-table '(    ))

(define-abbrev-table 'idlwave-mode-abbrev-table '(    (".ap" "arg_present()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".b" "begin" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    (".c" "" (lambda nil "(idlwave-case)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-case))) 0)
    (".cb" "byte()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".cc" "complex()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".cd" "double()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".cf" "float()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".cl" "long()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".co" "common" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    (".cs" "string()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".cx" "fix()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".e" "else" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    (".ec" "endcase" idlwave-show-begin 0)
    (".ee" "endelse" idlwave-show-begin 0)
    (".ef" "endfor" idlwave-show-begin 0)
    (".ei" "endif else if" idlwave-show-begin 0)
    (".el" "endif else" idlwave-show-begin 0)
    (".elif" "" (lambda nil "(idlwave-elif)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-elif))) 0)
    (".en" "endif" idlwave-show-begin 0)
    (".er" "endrep" idlwave-show-begin 0)
    (".es" "endswitch" idlwave-show-begin 0)
    (".ew" "endwhile" idlwave-show-begin 0)
    (".f" "" (lambda nil "(idlwave-for)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-for))) 0)
    (".fu" "" (lambda nil "(idlwave-function)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-function))) 0)
    (".g" "goto," (lambda nil (idlwave-check-abbrev 0 t)) 1)
    (".gu" "Get_UValue=" nil 5)
    (".gv" "Get_Value=" nil 1)
    (".h" "help," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".i" "" (lambda nil "(idlwave-if)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-if))) 0)
    (".iap" "if arg_present() then" (lambda nil (idlwave-check-abbrev 6)) 0)
    (".ik" "if keyword_set() then" (lambda nil (idlwave-check-abbrev 6)) 0)
    (".ine" "if n_elements() eq 0 then" (lambda nil (idlwave-check-abbrev 11)) 0)
    (".inn" "if n_elements() ne 0 then" (lambda nil (idlwave-check-abbrev 11)) 0)
    (".k" "keyword_set()" (lambda nil (idlwave-check-abbrev 1)) 1)
    (".n" "n_elements()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".np" "n_params()" (lambda nil (idlwave-check-abbrev 0)) 0)
    (".od" "obj_destroy," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".oi" "on_ioerror," (lambda nil (idlwave-check-abbrev 0 1)) 0)
    (".on" "Obj_New()" (lambda nil (idlwave-check-abbrev 1)) 3)
    (".or" "openr," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".ou" "openu," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".ow" "openw," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".p" "print," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".pn" "Ptr_New()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".pr" "" (lambda nil "(idlwave-procedure)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-procedure))) 0)
    (".pt" "plot," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".r" "" (lambda nil "(idlwave-repeat)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-repeat))) 0)
    (".re" "read," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".rf" "readf," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".rt" "return" (lambda nil (idlwave-check-abbrev 0)) 0)
    (".ru" "readu," (lambda nil (idlwave-check-abbrev 0)) 0)
    (".s" "size()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sc" "strcompress()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sl" "strlowcase()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sm" "strmid()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sn" "strlen()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sp" "strpos()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".sr" "strtrim()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".st" "strput()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".su" "Set_UValue =" nil 1)
    (".sw" "" (lambda nil "(idlwave-switch)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-switch))) 0)
    (".t" "then" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    (".u" "until" (lambda nil (idlwave-check-abbrev 0 t)) 0)
    (".w" "" (lambda nil "(idlwave-while)" (if (idlwave-quoted) (progn (unexpand-abbrev) nil) (idlwave-while))) 0)
    (".wb" "Widget_Base()" (lambda nil (idlwave-check-abbrev 1)) 0)
    (".wc" "widget_control," (lambda nil (idlwave-check-abbrev 0)) 9)
    (".wi" "widget_info()" (lambda nil (idlwave-check-abbrev 1)) 4)
    (".wu" "writeu," (lambda nil (idlwave-check-abbrev 0)) 0)
    ))

(define-abbrev-table 'java-mode-abbrev-table '(    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'jde-mode-abbrev-table '(    ("catch" "catch" c-electric-continued-statement 0)
    ("else" "else" c-electric-continued-statement 0)
    ("finally" "finally" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'jde-run-mode-abbrev-table '(    ))

(define-abbrev-table 'latex-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'lisp-mode-abbrev-table '(    ))

(define-abbrev-table 'log-edit-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'm4-mode-abbrev-table '(    ))

(define-abbrev-table 'mail-abbrevs '(    ))

(define-abbrev-table 'makefile-mode-abbrev-table '(    ))

(define-abbrev-table 'matlab-mode-abbrev-table '(    ))

(define-abbrev-table 'matlab-shell-help-mode-abbrev-table '(    ))

(define-abbrev-table 'matlab-shell-topic-mode-abbrev-table '(    ))

(define-abbrev-table 'message-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'meta-mode-abbrev-table '(    ))

(define-abbrev-table 'mh-letter-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'objc-mode-abbrev-table '(    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'occur-mode-abbrev-table '(    ))

(define-abbrev-table 'octave-abbrev-table '(    ("`a" "all_va_args" nil 0)
    ("`b" "break" nil 0)
    ("`c" "continue" nil 0)
    ("`ca" "catch" nil 0)
    ("`cs" "case" nil 0)
    ("`ef" "endfor" nil 0)
    ("`efu" "endfunction" nil 0)
    ("`ei" "endif" nil 0)
    ("`el" "else" nil 0)
    ("`eli" "elseif" nil 0)
    ("`es" "endswitch" nil 0)
    ("`et" "end_try_catch" nil 0)
    ("`eu" "end_unwind_protect" nil 0)
    ("`ew" "endwhile" nil 0)
    ("`f" "for" nil 0)
    ("`fu" "function" nil 0)
    ("`gl" "global" nil 0)
    ("`gp" "gplot" nil 0)
    ("`gs" "gsplot" nil 0)
    ("`if" "if ()" nil 0)
    ("`o" "otherwise" nil 0)
    ("`r" "return" nil 0)
    ("`rp" "replot" nil 0)
    ("`s" "switch" nil 0)
    ("`t" "try" nil 0)
    ("`up" "unwind_protect" nil 0)
    ("`upc" "unwind_protect_cleanup" nil 0)
    ("`w" "while ()" nil 0)
    ))

(define-abbrev-table 'org-mode-abbrev-table '(    ))

(define-abbrev-table 'outline-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'pascal-mode-abbrev-table '(    ))

(define-abbrev-table 'perl-mode-abbrev-table '(    ))

(define-abbrev-table 'pike-mode-abbrev-table '(    ("else" "else" c-electric-continued-statement 0)
    ("while" "while" c-electric-continued-statement 0)
    ))

(define-abbrev-table 'plain-tex-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'prolog-mode-abbrev-table '(    ))

(define-abbrev-table 'ps-mode-abbrev-table '(    ))

(define-abbrev-table 'ps-run-mode-abbrev-table '(    ))

(define-abbrev-table 'remember-mode-abbrev-table '(    ))

(define-abbrev-table 'select-tags-table-mode-abbrev-table '(    ))

(define-abbrev-table 'sgml-mode-abbrev-table '(    ))

(define-abbrev-table 'sh-mode-abbrev-table '(    ))

(define-abbrev-table 'shell-mode-abbrev-table '(    ))

(define-abbrev-table 'slitex-mode-abbrev-table '(    ))

(define-abbrev-table 'special-mode-abbrev-table '(    ))

(define-abbrev-table 'svn-log-edit-mode-abbrev-table '(    ))

(define-abbrev-table 'svn-log-view-mode-abbrev-table '(    ))

(define-abbrev-table 'svn-status-diff-mode-abbrev-table '(    ))

(define-abbrev-table 'tcl-mode-abbrev-table '(    ))

(define-abbrev-table 'tex-shell-abbrev-table '(    ))

(define-abbrev-table 'texinfo-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 0)
    ))

(define-abbrev-table 'text-mode-abbrev-table '(    ("qcnw" "QC Navigation Window" nil 4)
    ))

(define-abbrev-table 'vc-annotate-mode-abbrev-table '(    ))

(define-abbrev-table 'vc-dired-mode-abbrev-table '(    ))

(define-abbrev-table 'vc-log-mode-abbrev-table '(    ))

(define-abbrev-table 'vc-svn-log-view-mode-abbrev-table '(    ))

(define-abbrev-table 'vhdl-mode-abbrev-table '(    ("--" "" vhdl-template-display-comment-hook 0)
    ("abs" "" vhdl-template-default-hook 0)
    ("access" "" vhdl-template-default-hook 0)
    ("after" "" vhdl-template-default-hook 0)
    ("alias" "" vhdl-template-alias-hook 0)
    ("all" "" vhdl-template-default-hook 0)
    ("and" "" vhdl-template-default-hook 0)
    ("arch" "" vhdl-template-architecture-hook 0)
    ("architecture" "" vhdl-template-architecture-hook 0)
    ("array" "" vhdl-template-default-hook 0)
    ("assert" "" vhdl-template-assert-hook 0)
    ("attr" "" vhdl-template-attribute-hook 0)
    ("attribute" "" vhdl-template-attribute-hook 0)
    ("begin" "" vhdl-template-default-indent-hook 0)
    ("block" "" vhdl-template-block-hook 0)
    ("body" "" vhdl-template-default-hook 0)
    ("buffer" "" vhdl-template-default-hook 0)
    ("bus" "" vhdl-template-default-hook 0)
    ("case" "" vhdl-template-case-hook 0)
    ("comp" "" vhdl-template-component-hook 0)
    ("component" "" vhdl-template-component-hook 0)
    ("cond" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conditional" "" vhdl-template-conditional-signal-asst-hook 0)
    ("conf" "" vhdl-template-configuration-hook 0)
    ("configuration" "" vhdl-template-configuration-hook 0)
    ("cons" "" vhdl-template-constant-hook 0)
    ("constant" "" vhdl-template-constant-hook 0)
    ("disconnect" "" vhdl-template-disconnect-hook 0)
    ("downto" "" vhdl-template-default-hook 0)
    ("else" "" vhdl-template-else-hook 0)
    ("elseif" "" vhdl-template-elsif-hook 0)
    ("elsif" "" vhdl-template-elsif-hook 0)
    ("end" "" vhdl-template-default-indent-hook 0)
    ("entity" "" vhdl-template-entity-hook 0)
    ("exit" "" vhdl-template-exit-hook 0)
    ("file" "" vhdl-template-file-hook 0)
    ("for" "" vhdl-template-for-hook 0)
    ("func" "" vhdl-template-function-hook 0)
    ("function" "" vhdl-template-function-hook 0)
    ("generic" "" vhdl-template-generic-hook 0)
    ("group" "" vhdl-template-group-hook 0)
    ("guarded" "" vhdl-template-default-hook 0)
    ("if" "" vhdl-template-if-hook 0)
    ("impure" "" vhdl-template-default-hook 0)
    ("in" "" vhdl-template-default-hook 0)
    ("inertial" "" vhdl-template-default-hook 0)
    ("inout" "" vhdl-template-default-hook 0)
    ("inst" "" vhdl-template-instance-hook 0)
    ("instance" "" vhdl-template-instance-hook 0)
    ("is" "" vhdl-template-default-hook 0)
    ("label" "" vhdl-template-default-hook 0)
    ("library" "" vhdl-template-library-hook 0)
    ("linkage" "" vhdl-template-default-hook 0)
    ("literal" "" vhdl-template-default-hook 0)
    ("loop" "" vhdl-template-bare-loop-hook 0)
    ("map" "" vhdl-template-map-hook 0)
    ("mod" "" vhdl-template-default-hook 0)
    ("nand" "" vhdl-template-default-hook 0)
    ("new" "" vhdl-template-default-hook 0)
    ("next" "" vhdl-template-next-hook 0)
    ("nor" "" vhdl-template-default-hook 0)
    ("not" "" vhdl-template-default-hook 0)
    ("null" "" vhdl-template-default-hook 0)
    ("of" "" vhdl-template-default-hook 0)
    ("on" "" vhdl-template-default-hook 0)
    ("open" "" vhdl-template-default-hook 0)
    ("or" "" vhdl-template-default-hook 0)
    ("others" "" vhdl-template-default-hook 0)
    ("out" "" vhdl-template-default-hook 0)
    ("pack" "" vhdl-template-package-hook 0)
    ("package" "" vhdl-template-package-hook 0)
    ("port" "" vhdl-template-port-hook 0)
    ("postponed" "" vhdl-template-default-hook 0)
    ("procedure" "" vhdl-template-procedure-hook 0)
    ("process" "" vhdl-template-process-hook 0)
    ("pure" "" vhdl-template-default-hook 0)
    ("range" "" vhdl-template-default-hook 0)
    ("record" "" vhdl-template-default-hook 0)
    ("register" "" vhdl-template-default-hook 0)
    ("reject" "" vhdl-template-default-hook 0)
    ("rem" "" vhdl-template-default-hook 0)
    ("report" "" vhdl-template-report-hook 0)
    ("return" "" vhdl-template-return-hook 0)
    ("rol" "" vhdl-template-default-hook 0)
    ("ror" "" vhdl-template-default-hook 0)
    ("select" "" vhdl-template-selected-signal-asst-hook 0)
    ("severity" "" vhdl-template-default-hook 0)
    ("shared" "" vhdl-template-default-hook 0)
    ("sig" "" vhdl-template-signal-hook 0)
    ("signal" "" vhdl-template-signal-hook 0)
    ("sla" "" vhdl-template-default-hook 0)
    ("sll" "" vhdl-template-default-hook 0)
    ("sra" "" vhdl-template-default-hook 0)
    ("srl" "" vhdl-template-default-hook 0)
    ("subtype" "" vhdl-template-subtype-hook 0)
    ("then" "" vhdl-template-default-hook 0)
    ("to" "" vhdl-template-default-hook 0)
    ("transport" "" vhdl-template-default-hook 0)
    ("type" "" vhdl-template-type-hook 0)
    ("unaffected" "" vhdl-template-default-hook 0)
    ("units" "" vhdl-template-default-hook 0)
    ("until" "" vhdl-template-default-hook 0)
    ("use" "" vhdl-template-use-hook 0)
    ("var" "" vhdl-template-variable-hook 0)
    ("variable" "" vhdl-template-variable-hook 0)
    ("wait" "" vhdl-template-wait-hook 0)
    ("when" "" vhdl-template-when-hook 0)
    ("while" "" vhdl-template-while-loop-hook 0)
    ("with" "" vhdl-template-with-hook 0)
    ("xnor" "" vhdl-template-default-hook 0)
    ("xor" "" vhdl-template-default-hook 0)
    ))

