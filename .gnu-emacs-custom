
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Info-additional-directory-list (quote ("~savoie/local/info/")))
 '(ansi-color-names-vector
   ["#454545" "#cd5542" "#6aaf50" "#baba36" "#5180b3" "#ab75c3" "#bdbc61" "#bdbdb3"])
 '(auto-compression-mode t nil (jka-compr))
 '(auto-insert-path (quote ("~savoie/.emacs.d/autoinsert/insert/")) t)
 '(bbdb-use-pop-up nil)
 '(bookmark-save-flag 1)
 '(canlock-password "b908e6544be0e18bb190e50cf9afc8279754b5a4" t)
 '(column-number-mode t)
 '(comment-column 32)
 '(ctypes-file-name "~savoie/.ctypes" t)
 '(custom-safe-themes t)
 '(custom-unlispify-menu-entries nil)
 '(custom-unlispify-tag-names nil)
 '(debug-on-error nil)
 '(default-abbrev-mode t t)
 '(default-major-mode (quote indented-text-mode) t)
 '(delete-by-moving-to-trash nil)
 '(delete-selection-mode nil)
 '(dired-listing-switches "-al")
 '(display-time-24hr-format t)
 '(ess-indent-level 4)
 '(fci-rule-color "#2e2e2e")
 '(font-lock-global-modes t)
 '(font-lock-maximum-decoration t)
 '(font-lock-support-mode (quote jit-lock-mode))
 '(global-font-lock-mode t nil (font-lock))
 '(gnus-agent-expire-days 90)
 '(gnus-init-file "~savoie/.emacs.d/.gnus")
 '(gnus-select-method (quote (nntp "nntp.aioe.org")))
 '(gnus-spam-autodetect (quote (("mail-200" t))))
 '(gnus-spam-process-destinations (quote (("mail" "nnml+private:spam"))))
 '(gnus-spam-process-newsgroups
   (quote
    (("mail"
      ((spam spam-use-bogofilter)
       (spam spam-use-blacklist)
       (ham spam-use-whitelist))))))
 '(gnus-thread-sort-functions (quote (gnus-thread-sort-by-number)))
 '(gnus-treat-body-boundary nil)
 '(gnus-treat-date-english (quote head))
 '(gnus-treat-display-x-face (quote head))
 '(gnus-treat-fill-article nil)
 '(gnus-treat-fill-long-lines nil)
 '(gnus-treat-hide-signature t)
 '(gnus-verbose 10)
 '(gnus-visible-headers
   (quote
    ("^From:" "^Newsgroups:" "^Subject:" "^Date:" "^Followup-To:" "^Reply-To:" "^Organization:" "^Summary:" "^Keywords:" "^To:" "^[BGF]?Cc:" "^Posted-To:" "^Mail-Copies-To:" "^Mail-Followup-To:" "^Apparently-To:" "^Gnus-Warning:" "^Resent-From:" "^X-Sent:" "^X-Gnus-Label:")))
 '(grep-find-command
   "find . -name \".svn\" -prune -o -type f  -exec grep -nH \"\" {} \\;")
 '(highlight-changes-global-initial-state (quote passive))
 '(highlight-changes-global-modes t)
 '(highlight-changes-initial-state (quote passive))
 '(idlwave-abbrev-start-char "/" t)
 '(idlwave-block-indent 3)
 '(idlwave-completion-case
   (quote
    ((routine . preserve)
     (keyword . downcase)
     (class . preserve)
     (method . preserve))))
 '(idlwave-completion-force-default-case t)
 '(idlwave-completion-show-classes 10)
 '(idlwave-continuation-indent 3)
 '(idlwave-do-actions t)
 '(idlwave-end-offset -3)
 '(idlwave-expand-generic-end t)
 '(idlwave-indent-to-open-paren nil)
 '(idlwave-init-rinfo-when-idle-after 2)
 '(idlwave-main-block-indent 3)
 '(idlwave-max-extra-continuation-indent 60)
 '(idlwave-pad-keyword t)
 '(idlwave-query-class
   (quote
    ((method-default)
     (keyword-default)
     ("INIT" . t)
     ("CLEANUP" . t)
     ("SETPROPERTY" . t)
     ("GETPROPERTY" . t))))
 '(idlwave-reserved-word-upcase nil nil nil "Want pro rather than PRO")
 '(idlwave-shell-automatic-electric-debug t)
 '(idlwave-shell-automatic-start t)
 '(idlwave-shell-debug-modifiers (quote (super)))
 '(idlwave-shell-electric-stop-color "#9400d3")
 '(idlwave-shell-explicit-file-name "my_idl.sh")
 '(idlwave-shell-reset-no-prompt t)
 '(idlwave-shell-separate-examine-output nil)
 '(idlwave-shell-show-commands (quote (run breakpoint debug misc)))
 '(idlwave-shell-use-dedicated-frame nil)
 '(idlwave-shell-use-dedicated-window nil)
 '(idlwave-surround-by-blank t)
 '(idlwave-system-directory "/usr/local/rsi/idl64/")
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-max-directory-size 100000)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode nil)
 '(inhibit-eol-conversion t)
 '(inhibit-startup-screen t)
 '(jde-global-classpath (quote (".")))
 '(js-indent-level 2)
 '(js2-basic-offset 4)
 '(js2-bounce-indent-p nil)
 '(js2-global-externs
   (quote
    ("define" "module" "require" "jQuery" "$" "_" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "require" "chai" "expect" "exports" "before" "after" "describe" "beforeEach" "afterEach" "it")))
 '(large-file-warning-threshold nil)
 '(longlines-show-hard-newlines t)
 '(lpr-command "/usr/bin/lpr")
 '(mail-self-address "<savoie@nsidc.org>" t)
 '(mail-source-delete-incoming t)
 '(mail-user-agent (quote message-user-agent))
 '(markdown-command "Markdown.pl")
 '(message-cite-function (quote message-cite-original-without-signature))
 '(message-mode-hook
   (quote
    (turn-on-flyspell turn-off-auto-fill turn-on-visual-line-mode)))
 '(message-send-mail-partially-limit nil)
 '(mm-verify-option (quote always))
 '(mouse-wheel-follow-mouse t)
 '(mouse-wheel-mode t nil (mwheel))
 '(nnmail-crosspost nil)
 '(nnmail-expiry-wait 3)
 '(org-agenda-files "~/Dropbox/orgs/org-agenda-files")
 '(org-clock-persist (quote history))
 '(org-clock-persist-file "~/Dropbox/orgs/org-clock-save.el")
 '(org-log-done (quote note))
 '(org-refile-targets (quote ((org-agenda-files :maxlevel . 5))))
 '(org-remember-default-headline "TASKS.org")
 '(org-remember-templates
   (quote
    (("todo" 116 "* TODO %? %u %a" nil nil nil)
     ("note" 110 "* %?" nil nil nil)
     ("Url" 117 "* %^{Title}
	Source: %u, %c
	%i" nil nil nil))))
 '(org-tag-alist
   (quote
    (("daac" . 100)
     ("programmer" . 112)
     ("erik" . 101)
     ("management" . 109)
     ("services" . 115)
     ("masie" . 105)
     ("annual_review" . 97))))
 '(org-todo-keywords
   (quote
    ((sequence "TODO" "WAITING" "|" "DONE" "DELEGATED" "CANCELLED"))))
 '(paradox-automatically-star t t)
 '(safe-local-variable-values
   (quote
    ((project-venv-name . "/Users/savoie/anaconda/envs/py3")
     (venv-location "/Users/savoie/anaconda/envs/py3")
     (project-venv-name . "/Users/savoie/anaconda/envs/gsvc")
     (venv-location "/Users/savoie/anaconda/envs/gsvc")
     (project-venv-name . "/Users/savoie/anaconda/envs/basemap")
     (venv-location "/Users/savoie/anaconda/envs/basemap")
     (project-venv-name . "/Users/savoie/anaconda/envs/gsx_regression")
     (venv-location "/Users/savoie/anaconda/envs/gsx_regression")
     (project-venv-name . "/Users/savoie/anaconda/envs/sea_ice_timeseries")
     (venv-location "/Users/savoie/anaconda/envs/sea_ice_timeseries")
     (project-venv-name . "/Users/savoie/anaconda/envs/sea_ice_tools")
     (venv-location "/Users/savoie/anaconda/envs/sea_ice_tools")
     (project-venv-name . "/Users/savoie/anaconda/envs/gsx")
     (venv-location "/Users/savoie/anaconda/envs/gsx")
     (project-venv-name . "/Users/savoie/anaconda/envs/seaice_tools")
     (venv-location "/Users/savoie/anaconda/envs/seaice_tools")
     (project-venv-name . "/Users/savoie/anaconda/envs/seaice_timeseries")
     (venv-location "/Users/savoie/anaconda/envs/seaice_timeseries")
     (project-venv-name . "/Users/savoie/anaconda/envs/monthly-seaice-extent-tools")
     (venv-location "/Users/savoie/anaconda/envs/monthly-seaice-extent-tools")
     (project-venv-name . "/Users/savoie/.pyenv/versions/miniconda-3.8.3/envs/gsx")
     (project-venv-name . "gsx")
     (venv-location "/Users/savoie/.pyenv/versions/miniconda-3.8.3/envs/gsx")
     (eval setq pyvenv-activate
           (concat
            (file-name-directory
             (let
                 ((d
                   (dir-locals-find-file ".")))
               (if
                   (stringp d)
                   d
                 (car d))))
            ".matasano"))
     (eval when
           (and
            (buffer-file-name)
            (file-regular-p
             (buffer-file-name))
            (string-match-p "^[^.]"
                            (buffer-file-name)))
           (emacs-lisp-mode)
           (when
               (fboundp
                (quote flycheck-mode))
             (flycheck-mode -1))
           (unless
               (featurep
                (quote package-build))
             (let
                 ((load-path
                   (cons ".." load-path)))
               (require
                (quote package-build))))
           (package-build-minor-mode)
           (set
            (make-local-variable
             (quote package-build-working-dir))
            (expand-file-name "../working/"))
           (set
            (make-local-variable
             (quote package-build-archive-dir))
            (expand-file-name "../packages/"))
           (set
            (make-local-variable
             (quote package-build-recipes-dir))
            default-directory))
     (project-venv-name . "moac-ft")
     (project-venv-name . ".monthly_sea_ice_extent_tools")
     (project-venv-name . ".icebridge-services")
     (venv-location "/Users/savoie/projects/icebridge-services/.icebridge-services")
     (project-venv-name . ".tb_pipeline")
     (venv-location "/Users/savoie/projects/tb_pipeline/.tb_pipeline")
     (project-venv-name . ".brightness-temperature-vm")
     (venv-location "/Users/savoie/projects/brightness-temperature-vm/.brightness-temperature-vm")
     (project-venv-name . ".bumpversion")
     (venv-location "/Users/savoie/projects/bumpversion/.bumpversion")
     (venv-location "/Users/savoie/projects/monthly_sea_ice_extent_tools/.monthly_sea_ice_extent_tools")
     (venv-location . "/home/savoie/projects/kpyswath/.pyswath")
     (venv-location . "/home/savoie/projects/pyswath/.pyswath")
     (project-venv-name . "local")
     (venv-location . "/home/savoie/projects/pyswath/.venv")
     (venv-location . "/home/savoie/projects/nsidc0001/.nsidc0001")
     (venv-location . "/home/savoie/projects/nsidc0001/")
     (venv-location . "~/projects/nsidc0001/")
     (eval ignore-errors "Write-contents-functions is a buffer-local alternative to before-save-hook"
           (add-hook
            (quote write-contents-functions)
            (lambda nil
              (delete-trailing-whitespace)
              nil))
           (require
            (quote whitespace))
           "Sometimes the mode needs to be toggled off and on."
           (whitespace-mode 0)
           (whitespace-mode 1))
     (whitespace-line-column . 80)
     (whitespace-style face trailing lines-tail)
     (require-final-newline . t)
     (ruby-compilation-executable . "ruby")
     (ruby-compilation-executable . "ruby1.8")
     (ruby-compilation-executable . "ruby1.9")
     (ruby-compilation-executable . "rbx")
     (ruby-compilation-executable . "jruby")
     (dired-actual-switches . "-latS")
     (dired-actual-switches . "-lat")
     (dired-omit-mode . t))))
 '(save-abbrevs t)
 '(scroll-bar-mode (quote right))
 '(select-active-regions t)
 '(send-mail-function (quote smtpmail-send-it))
 '(show-paren-mode t)
 '(show-paren-style (quote parenthesis))
 '(show-trailing-whitespace t)
 '(sml/mode-width
   (if
       (eq powerline-default-separator
           (quote arrow))
       (quote right)
     (quote full)))
 '(sml/pos-id-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
                  (quote display)
                  (funcall
                   (intern
                    (format "powerline-%s-%s" powerline-default-separator
                            (car powerline-default-separator-dir)))
                   (quote powerline-active1)
                   (quote powerline-active2))))
     (:propertize " " face powerline-active2))))
 '(sml/pos-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active1)
     (:eval
      (propertize " "
                  (quote display)
                  (funcall
                   (intern
                    (format "powerline-%s-%s" powerline-default-separator
                            (cdr powerline-default-separator-dir)))
                   (quote powerline-active1)
                   nil)))
     (:propertize " " face sml/global))))
 '(sml/pre-id-separator
   (quote
    (""
     (:propertize " " face sml/global)
     (:eval
      (propertize " "
                  (quote display)
                  (funcall
                   (intern
                    (format "powerline-%s-%s" powerline-default-separator
                            (car powerline-default-separator-dir)))
                   nil
                   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-minor-modes-separator
   (quote
    (""
     (:propertize " " face powerline-active2)
     (:eval
      (propertize " "
                  (quote display)
                  (funcall
                   (intern
                    (format "powerline-%s-%s" powerline-default-separator
                            (cdr powerline-default-separator-dir)))
                   (quote powerline-active2)
                   (quote powerline-active1))))
     (:propertize " " face powerline-active1))))
 '(sml/pre-modes-separator (propertize " " (quote face) (quote sml/modes)))
 '(smtpmail-smtp-server "smtp.colorado.edu")
 '(smtpmail-smtp-service "587")
 '(smtpmail-smtp-user "savoie")
 '(smtpmail-stream-type (quote starttls))
 '(spam-bogofilter-path "~savoie/local/bin/bogofilter")
 '(spam-log-to-registry nil)
 '(spam-mark-ham-unread-before-move-from-spam-group t)
 '(spam-move-spam-nonspam-groups-only t)
 '(spam-process-ham-in-spam-groups t)
 '(spam-use-BBDB t)
 '(spam-use-blacklist nil)
 '(spam-use-bogofilter t)
 '(spam-use-regex-body t)
 '(spam-use-regex-headers t)
 '(spam-use-stat nil)
 '(spam-use-whitelist t)
 '(spam-whitelist "~savoie/News/spam/whitelist")
 '(starttls-extra-arguments (quote ("--no-ca-verification")))
 '(starttls-gnutls-program "gnutls-cli")
 '(tab-always-indent (quote complete))
 '(tab-width 4)
 '(tool-bar-mode nil nil (tool-bar))
 '(transient-mark-mode t)
 '(url-privacy-level (quote (paranoid)))
 '(url-temporary-directory "~savoie/tmp")
 '(vc-annotate-background "#3b3b3b")
 '(vc-annotate-color-map
   (quote
    ((20 . "#dd5542")
     (40 . "#CC5542")
     (60 . "#fb8512")
     (80 . "#baba36")
     (100 . "#bdbc61")
     (120 . "#7d7c61")
     (140 . "#6abd50")
     (160 . "#6aaf50")
     (180 . "#6aa350")
     (200 . "#6a9550")
     (220 . "#6a8550")
     (240 . "#6a7550")
     (260 . "#9b55c3")
     (280 . "#6CA0A3")
     (300 . "#528fd1")
     (320 . "#5180b3")
     (340 . "#6380b3")
     (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color "#DC8CC3")
 '(visible-bell nil)
 '(w3m-default-display-inline-images t)
 '(w3m-search-default-engine "google")
 '(w3m-use-header-line nil)
 '(w3m-use-toolbar nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
